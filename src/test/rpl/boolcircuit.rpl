# Set input variables
i1 := FALSE;
i2 := FALSE;
i3 := TRUE;

# Set state of gates (TRUE is functioning, FALSE is faulty)
x1_broken := FALSE <<1>> TRUE;
x2_broken := FALSE <<1>> TRUE;
a1_broken := FALSE <<1>> TRUE;
a2_broken := FALSE <<1>> TRUE;
o1_broken := FALSE <<1>> TRUE;

# Circuit logic
if (x1_broken) l1 := FALSE <<0>> TRUE else l1 := (i1 ^ i2);
if (a1_broken) l2 := FALSE <<0>> TRUE else l2 := (i1 & i2);
if (a2_broken) l3 := FALSE <<0>> TRUE else l3 := (l1 & i3);
if (x2_broken) b2 := FALSE <<0>> TRUE else b2 := (l1 ^ i3);
if (o1_broken) b1 := FALSE <<0>> TRUE else b1 := (l3 | l2);
  
# Observe output  
observe b1 & !b2;
 
# Return state of gates
assert-ranked([x1_broken, x2_broken, a1_broken, a2_broken, o1_broken],
	[0, [true, false, false, false, false]],
	[1, [false, true, false, true, false]],
	[1, [false, true, false, false, true]],
	[1, [false, true, true, false, false]],
	[1, [true, false, false, true, false]],
	[1, [true, false, false, false, true]],
	[1, [true, true, false, false, false]],
	[1, [true, false, true, false, false]],
	[2, [false, true, true, false, true]],
	[2, [true, true, true, false, false]],
	[2, [true, false, true, true, false]],
	[2, [false, true, false, true, true]],
	[2, [true, true, false, true, false]],
	[2, [false, true, true, true, false]],
	[2, [true, true, false, false, true]],
	[2, [true, false, true, false, true]],
	[2, [true, false, false, true, true]],
	[3, [true, true, true, true, false]],
	[3, [true, true, true, false, true]],
	[3, [true, true, false, true, true]],
	[3, [true, false, true, true, true]],
	[3, [false, true, true, true, true]],
	[4, [true, true, true, true, true]]);


