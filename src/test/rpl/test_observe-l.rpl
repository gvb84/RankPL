# Cumulativity and reversibility
x := << 0 ... 10 >>;
observe-l (1) x < 5;
assert-ranked(x, 
	[0, 0], [0, 1], [0, 2], [0, 3], [0, 4],
	[1, 5], [1, 6], [1, 7], [1, 8], [1, 9]);
observe-l (1) x < 5;
assert-ranked(x, 
	[0, 0], [0, 1], [0, 2], [0, 3], [0, 4],
	[2, 5], [2, 6], [2, 7], [2, 8], [2, 9]);
observe-l (1) x >= 5;
assert-ranked(x, 
	[0, 0], [0, 1], [0, 2], [0, 3], [0, 4],
	[1, 5], [1, 6], [1, 7], [1, 8], [1, 9]);
observe-l (1) x >= 5;
assert-ranked(x, 
	[0, 0], [0, 1], [0, 2], [0, 3], [0, 4],
	[0, 5], [0, 6], [0, 7], [0, 8], [0, 9]);
observe-l (1) x >= 5;
assert-ranked(x, 
	[1, 0], [1, 1], [1, 2], [1, 3], [1, 4],
	[0, 5], [0, 6], [0, 7], [0, 8], [0, 9]);
reset;

# shift down
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (1) a > 1;
assert-ranked(a,
	[0, 1],
	[0, 2],
	[1, 3]);
reset;

# shift down and up
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (2) a > 1;
assert-ranked(a,
	[0, 2],
	[1, 3],
	[1, 1]);
reset;

# shift down and up twice
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (1) a > 1;
observe-l (1) a > 1;
assert-ranked(a,
	[0, 2],
	[1, 3],
	[1, 1]);
reset;

# reverse 
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (1) a > 1;
observe-l (1) a <= 1;
assert-ranked(a,
	[0, 1],
	[1, 2],
	[2, 3]);
reset;

# shift up 
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (1) a == 1;
assert-ranked(a,
	[0, 1],
	[2, 2],
	[3, 3]);
reset;

# shift up twice
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (1) a == 1;
observe-l (1) a == 1;
assert-ranked(a,
	[0, 1],
	[3, 2],
	[4, 3]);
reset;

# reverse 
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (1) a == 1;
observe-l (1) a != 1;
assert-ranked(a,
	[0, 1],
	[1, 2],
	[2, 3]);
reset;

# false 
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (1) false;
assert-ranked(a,
	[0, 1],
	[1, 2],
	[2, 3]);
reset;

# true 
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (1) false;
assert-ranked(a,
	[0, 1],
	[1, 2],
	[2, 3]);
reset;

# increase 
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (1) a == 1;
assert-ranked(a,
	[0, 1],
	[2, 2],
	[3, 3]);
reset;

# decrease 
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (1) a == 3;
assert-ranked(a,
	[0, 1],
	[1, 2],
	[1, 3]);
reset;

# decrease 
normally(1) {
	a := 1;
} exceptionally {
	normally (1) {
		a := 2;
	} exceptionally {
		a := 3;
	}
}
observe-l (2) a == 3;
assert-ranked(a,
	[0, 1],
	[1, 2],
	[0, 3]);
reset;
