a := 10 <<1>> 20;
b := 10 <<1>> 20;
c := a * b;
assert-ranked(c,
	[0,100],
	[1,200],
	[2,400]);
reset;

a := 10 <<1>> 20;
b := 10 <<1>> 20;
c := a * b;
observe c > 150;
assert-ranked(c,
	[0,200],
	[1,400]);
reset;

a := 10 <<1>> 20;
b := 10 <<1>> 20;
c := a * b;
observe c > 150;
assert-ranked([a, b],
	[0,[20,10]],
	[0,[10,20]],
	[1,[20,20]]);
reset;

define program() { 
	a := 10 << 1 >> 20;
	b := 10 << 1 >> 20;
	c := a * b;
	observe c > 150;
 	return "(a = " + a + ", b = " + b + ")";
}
result := infer(program());
assert-ranked(result, [0, ["(a = 10, b = 20)", "(a = 20, b = 10)"]]);
reset;

a := << 0 ... 4 >>;
observe-j (2) a < 2;
assert-ranked(a, 
	[0, 0],
	[0, 1],
	[2, 2],
	[2, 3]);
reset;

a := << 0 ... 4 >>;
observe-l (2) a < 2;
observe-l (2) a >= 2;
assert-ranked(a,
	[0, 0],
	[0, 1],
	[0, 2],
	[0, 3]);
reset;

a := << 0 ... 4 >>;
observe-l (2) a < 2;
observe-l (2) a < 2;
assert-ranked(a,
	[0, 0],
	[0, 1],
	[4, 2],
	[4, 3]);
reset;

a := << 0 ... 4 >>;
observe-l (2) a < 2;
assert-ranked(a,
	[0, 0],
	[0, 1],
	[2, 2],
	[2, 3]);
reset;
