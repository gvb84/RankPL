# Simple while loop 
x := 0;
while (x < 5000) do {
	x++;
}
assert(x == 5000);
reset;

# Simple while loop
x := 0;
y := 3000 << 1 >> 5000;
while (x < y) do {
	x++;
}
assert-ranked(x,
	[0, 3000],
	[1, 5000]);
reset;

# Nested while loop 
x := 0;
z := 0;
while (x < 1000) do {
	y := 0;
	while (y < 1000) do {
		y++;
		z++;
	}
	x++;
}
assert(z == 1000 * 1000);
reset;

# Nested while loop 
x := 1;
z := 0;
while (x < 10) do {
	y := 1;
	while (y <= x) do {
		z := z + y;
		y++;
	}
	x++;
}
assert(z == 165);

# Two alternatives used inside body
x := 0;
y := 1 <<1>> 2;
z := 0;
while (x < 50000) do {
	x++;
	z := z + y;
}
assert-ranked(z,
	[0, 50000],
	[1, 100000]);
reset;

# Two alternatives used in expression
x := 0;
y := 50000 <<1>> 100000;
while (x < y) do {
	x++;
}
assert-ranked(x,
	[0, 50000],
	[1, 100000]);
reset;

# observe inside while
x := 0;
y := 1 <<0>> 2;
while (x < 5000) do {
	x++;
	observe-l (1) y == 2;
}
assert-ranked([x,y],
	[0, [5000, 2]],
	[5000, [5000, 1]]);
reset;

# ranked choice inside while
x := 0;
y := 0;
while (x < 3) do {
	x++;
	normally y := y + 1; exceptionally skip;
}
assert-ranked(y,
	[0, 3],
	[1, 2],
	[2, 1],
	[3, 0]);
reset;