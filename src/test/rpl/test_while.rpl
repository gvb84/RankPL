# Two alternatives used inside body
x := 0;
y := 1 <<1>> 2;
z := 0;
while (x < 3) do {
	x++;
	z := z + y;
};
assert-ranked(z,
	[0, 3],
	[1, 6]);
reset;

# Two alternatives used in expression
x := 0;
y := 10 <<1>> 20;
while (x < y) do {
	x++;
};
assert-ranked(x,
	[0, 10],
	[1, 20]);
reset;

# observe inside while
x := 0;
y := 1 <<0>> 2;
while (x < 10) do {
	x++;
	observe-l (1) y == 2;
};
assert-ranked(y,
	[0, 2],
	[10, 1]);
reset;

# ranked choice inside while
x := 0;
y := 0;
while (x < 3) do {
	x++;
	normally y := y + 1 exceptionally skip;
};
assert-ranked(y,
	[0, 3],
	[1, 2],
	[2, 1],
	[3, 0]);
reset;