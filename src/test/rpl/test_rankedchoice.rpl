define test() {
	normally(1) {
		return 1;
	} exceptionally {
		normally (1) {
			return 2;
		} exceptionally {
			return 3;
		};
	};
};

# rank 0
a := test();
normally(0) {
	b := a + 10;
} exceptionally {
	b := a + 20;
};
assert-ranked (b, 
	[0, 11],
	[1, 12], 
	[2, 13],
	[0, 21],
	[1, 22], 
	[2, 23]);
reset;

# rank 1
a := test();
normally(1) {
	b := a + 10;
} exceptionally {
	b := a + 20;
};
assert-ranked (b, 
	[0, 11],
	[1, 12], 
	[2, 13],
	[1, 21],
	[2, 22], 
	[3, 23]);
reset;

# rank 2
a := test();
normally(2) {
	b := a + 10;
} exceptionally {
	b := a + 20;
};
assert-ranked (b, 
	[0, 11],
	[1, 12], 
	[2, 13],
	[2, 21],
	[3, 22], 
	[4, 23]);
reset;

# rank 3
a := test();
normally(3) {
	b := a + 10;
} exceptionally {
	b := a + 20;
};
assert-ranked (b, 
	[0, 11],
	[1, 12], 
	[2, 13],
	[3, 21],
	[4, 22], 
	[5, 23]);
reset;

# Skip left
b := 100;
a := test();
normally(1) {
	skip;
} exceptionally {
	b := a + 20;
};
assert-ranked (b, 
	[0, 100],
	[1, 21],
	[2, 22], 
	[3, 23]);
reset;

# Skip right
b := 100;
a := test();
normally(1) {
	b := a + 10;
} exceptionally {
	skip;
};
assert-ranked (b, 
	[1, 100],
	[0, 11],
	[1, 12], 
	[2, 13]);
reset;

# Block left
a := test();
normally (3) {
	observe false;
} exceptionally {
	b := a + 20;
};
assert-ranked (b, 
	[0, 21],
	[1, 22], 
	[2, 23]);
reset;

# Block right
a := test();
normally (3) {
	b := a + 10;
} exceptionally {
	observe false;
};
assert-ranked (b, 
	[0, 11],
	[1, 12], 
	[2, 13]);

define test2() {
	normally(1) {
		return 0;
	} exceptionally {
		normally (1) {
			return 5;
		} exceptionally {
			return 10;
		};
	};
};
reset;

# Rank depends on value of variable
a := test();
normally (a*2) {
	observe false;
} exceptionally {
	observe true;
};
assert-ranked (a, 
	[0, 1],
	[3, 2], 
	[6, 3]);
reset;

# Syntactic shortcut: only normally, no rank
x := 10;
normally x := 20;
assert-ranked(x, [0,20], [1,10]);
reset;

# Syntactic shortcut: only normally, with rank
x := 10;
normally (5) x := 20;
assert-ranked(x, [0,20], [5,10]);
reset;

# Syntactic shortcut: only exceptionally, no rank
x := 10;
exceptionally x := 20;
assert-ranked(x, [0,10], [1,20]);
reset;

# Syntactic shortcut: only exceptionally, with rank
x := 10;
exceptionally (5) x := 20;
assert-ranked(x, [0,10], [5,20]);
reset;



