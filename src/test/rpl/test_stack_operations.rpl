# Test for stack functions
stack := newStack();
assert size(stack) == 0;

stack := push(stack, 10);
assert peek(stack) == 10;
assert size(stack) == 1;

stack := newStack();
assert size(stack) == 0;

stack := push(stack, 10);
assert peek(stack) == 10;
assert size(stack) == 1;

stack := push(stack, 20);
assert peek(stack) == 20;
assert size(stack) == 2;

[stack, x] := pop(stack);
assert x == 20;
assert peek(stack) == 10;
assert size(stack) == 1;

[stack, x] := pop(stack);
assert x == 10;
assert size(stack) == 0;

# Equality
stack1 := newStack();
stack2 := newStack();
assert(stack1 == stack2);
stack1 := push(stack1, 10);
assert(stack1 != stack2);
stack2 := push(stack2, 10);
assert(stack1 == stack2);
stack1 := push(stack1, 20);
assert(stack1 != stack2);
stack2 := push(stack2, 20);
assert(stack1 == stack2);
[stack1, x] := pop(stack1);
assert(stack1 != stack2);
[stack2, x] := pop(stack2);
assert(stack1 == stack2);
[stack1, x] := pop(stack1);
assert(stack1 != stack2);
[stack2, x] := pop(stack2);
assert(stack1 == stack2);
