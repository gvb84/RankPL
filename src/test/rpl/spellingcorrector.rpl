# A spelling correction algorithm.

# Input (possibly misspelled)
input := "tweleven";

# Read dictionary of possible words
dictionary := [
	"one", "two", "three", "four", "five",
	"six", "seven", "eight", "nine", "ten", "eleven",
	"twelve", "thirteen", "fourteen", "fifteen", "sixteen",
	"seventeen", "eighteen", "nineteen", "twenty"
];

# Randomly choose word from dictionary
choice := << 0 ... len(dictionary) >>;
potential_match := dictionary[choice];

# Initialize counters (i iterates over input, k over match)
i := 0; k := 0;

# Append * to end of input and potential_match, to match end-of-word
input := input + "*";
potential_match := potential_match + "*";

# While there are characters left to match ...
while (i < len(input) & k < len(potential_match)) do {
	# Improve rank of match with 1 unit of rank w.r.t. rank of a mis-match.
	observe-l (1) (input[i] == potential_match[k]);

	# If match, increase pointers
	if (input[i] == potential_match[k]) then {
		i := i + 1;
		k := k + 1;
	}

	# If mis-match, consider three possibilities:
	else {
		either {
			# misspelling (as in cot instead of cat)
			i := i + 1; 
			k := k + 1;
		} or {
			# misplaced char in input (as in cart instead of cat)
			i := i + 1; 
		} or {
			# missing char in input (as in ct instead of cat)
			k := k + 1;
		};
	};
};

# Filter on event that all characters were matched
observe i == len(input) & k == len(potential_match);

assert-ranked(potential_match,
	[0, "eleven*"],
	[0, "twelve*"],
	[2, "seven*"],
	[3, "fifteen*"],
	[3, "twenty*"],
	[3, "ten*"],
	[3, "thirteen*"],
	[3, "nineteen*"],
	[3, "sixteen*"],
	[3, "three*"],
	[4, "five*"],
	[4, "fourteen*"],
	[4, "eighteen*"],
	[4, "two*"],
	[4, "seventeen*"],
	[5, "eight*"],
	[5, "one*"],
	[5, "nine*"],
	[6, "four*"],
	[6, "six*"]);

